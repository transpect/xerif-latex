%%
%% This is file `transpect-kernel.sty',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% transpect.dtx  (with options: `kernel')
%% 
%% IMPORTANT NOTICE:
%% 
%% For the copyright see the source file.
%% 
%% Any modified versions of this file must be renamed
%% with new filenames distinct from transpect-kernel.sty.
%% 
%% For distribution of the original source see the terms
%% for copying and modification in the file transpect.dtx.
%% 
%% This generated file may be distributed as long as the
%% original source files, as listed above, are part of the
%% same distribution. (The sources need not necessarily be
%% in the same archive or directory.)
\def\fileversion{0.2.0}%
\def\filedate{2021-05-23}%
\NeedsTeXFormat{LaTeX2e}[2018/12/01]
\ProvidesPackage{transpect-kernel}
    [\filedate \fileversion le-tex transpect kernel]
\newif\if@tp@debug \@tp@debugfalse
\DeclareOption{debug}{\global\@tp@debugtrue}%
\ProcessOptions
\RequirePackage{etoolbox}
\def\tpKernelDebugMsg#1{\if@tp@debug\message{[tp Kernel Debug]\space\space#1^^J}\fi}
\def\tpPackageError#1#2#3#4{%
   \GenericError{%
      (#1)\@spaces\@spaces\@spaces\@spaces
   }{%
      [tp #1 #2 Error] #3%
   }{}{#4}%
}
\long\def\tpDeclareContainer#1#2{%
  \@namedef{tp@container@#1}{}%
  \@namedef{tp@cur@cont}{#1}%
  \begingroup
    \def\tpInherit ##1 from ##2;{\@tp@inherit{##1}{##2}{#1}}%
    \def\tpDeclareType##1##2{%
      \expandafter\ifx\csname tp@type@##1@#1\endcsname\relax
        \@namegdef{tp@type@##1@#1}{##2}%
      \else
        \gcsappto{tp@type@##1@#1}{##2}%
      \fi
    }%
    \def\tpDeclareEnv##1##2{\@namegdef{#1}{\def\tp@cur@cont{#1}##1}\@namegdef{end#1}{##2}}%
    \def\x{%
      #2%
    }%
  \expandafter\x\endgroup
}
\def\tpEvalType#1{%
  \tpKernelDebugMsg{Evaluating tp@type@#1@\tp@cur@cont:^^J \expandafter\meaning\csname tp@type@#1@\tp@cur@cont\endcsname}%
  \csname tp@type@#1@\tp@cur@cont\endcsname
}
\def\tpCheckParent#1#2{%
  \expandafter\ifx\csname tp@container@#1\endcsname\relax
    \tpPackageError{Kernel}{Class}
    {Parent Container `#1' undeclared}
    {You tried to make a Container named `#2' inherit from a Container named `#1', but a Container with that name does not exist.\MessageBreak
     Please make sure that parent Containers are declared before their descendents.}%
  \else
    \@namedef{tp@parent@#2}{#1}%
  \fi
}
\def\@tp@inherit#1#2#3{\@tp@parse@inherit #1,,\@nil #2,,\@nil #3\@@nil}
\def\@tp@parse@inherit #1,#2,\@nil #3,#4,\@nil #5\@@nil{%
  \let\next\relax
  \if!#1!\else
    \if!#3!\else
      \tp@do@inherit{#1}{#3}{#5}%
      \def\@argii{#2}\def\@argiv{#4}%
      \ifx\@argii\@empty
        \ifx\@argiv\@empty\else
          \def\next{\@tp@parse@inherit #1,,\@nil #4,\@nil #5\@@nil}%
        \fi
      \else
        \ifx\@argiv\@empty
          \def\next{\@tp@parse@inherit #2,\@nil #3,,\@nil #5\@@nil}%
        \else
          \def\next{%
            \@tp@parse@inherit #1,,\@nil #4,\@nil #5\@@nil
            \@tp@parse@inherit #2,\@nil #3,#4,\@nil #5\@@nil
          }%
        \fi\fi\fi\fi
  \next}
\def\tp@do@inherit#1#2#3{%
  \tpKernelDebugMsg{#3 inherits #1 from #2.}%
  \tpCheckParent{#2}{#3}%
  \expandafter\ifx\csname tp@type@#1@#2\endcsname\relax
    \tpPackageError{Kernel}{Type}{Type `#1' was not declared}{Type `#1' was not declared for Container `#2'.}%
  \else
    \edef\x{\noexpand\gcsappto{tp@type@#1@#3}}%
    \expandafter\expandafter\expandafter\x\expandafter\expandafter\expandafter{\csname tp@type@#1@#2\endcsname}%
    \tpKernelDebugMsg{value tp@type@#1@#3:^^J \expandafter\meaning\csname tp@type@#1@#3\endcsname}%
  \fi
}
\def\tpProvideComp#1#2#3#4{%
  \ltx@LocalExpandAfter\global\expandafter\let\csname tp@\tp@cur@cont @#4\endcsname\relax
  \expandafter\long\expandafter\def\csname #1\endcsname##1{%
    #2\expandafter\long\expandafter\def\csname tp@\tp@cur@cont @#4\endcsname{##1}\ignorespaces#3}%
}
\def\tpProvideCountedComp#1#2#3#4#5#6{%
  \tpProvideComp{#1}
    {\bgroup#5\expandafter\global}
    {\def\@tempa{{@tp@reset@components}}%
     \edef\@tempb{%
       \noexpand\ltx@LocalExpandAfter\noexpand\global\noexpand\expandafter\noexpand\let
         \noexpand\csname tp@\noexpand\tp@cur@cont @#2-\the#4\noexpand\endcsname
         \noexpand\relax}%
     \expandafter\expandafter\expandafter\csgappto\expandafter\@tempa\expandafter{\@tempb}%
     \egroup}
    {#2-\the#4}%
  #6\expandafter\long\expandafter\def\csname tp@\tp@cur@cont @#3\endcsname{\csname tp@\tp@cur@cont @#2-\the#4\endcsname}%
  \csgappto{@tp@reset@components}{\csname tp@\tp@cur@cont @#3\endcsname}%
}
\long\protected\def\tpSetComp#1#2{%
  \expandafter\ifx\csname tp@\tp@cur@cont @#1\endcsname\relax
    \ifx\tp@is@counted\relax
      \tpProvideCountedComp{tp#1}{\tp@cnt@grp-#1}{#1}{\csname \tp@cnt@grp-Cnt\endcsname}{}{}%
    \else
      \tpProvideComp{tp#1}{}{}{#1}%
    \fi
  \fi
  \csname tp#1\endcsname{#2}%
}
\def\tpUseComp#1{\csname tp@\tp@cur@cont @#1\endcsname}
\def\tpGetComp#1{\tpIfComp{#1}{\tpUseComp{#1}\par}{}}
\long\def\tpIfComp#1#2#3{\expandafter\ifx\csname tp@\tp@cur@cont @#1\endcsname\relax#3\else#2\fi}
\long\def\tpIfCompEmpty#1#2#3{\long\def\@tempa{}\expandafter\ifx\csname tp@\tp@cur@cont @#1\endcsname\@tempa#2\else#3\fi}
\def\tp@check@empty{\@ifnextchar[\@tp@check@empty{\@tp@check@empty[]}}%]
\def\@tp@check@empty[#1]#2#3#4{%
  \tpIfComp{#4#3}
    {\tpIfCompEmpty{#4#3}
      {\expandafter\global\expandafter\let\csname tp@#2@#4#3\endcsname\relax}
      {}}
    {\tpIfComp{#1#3}
      {\expandafter\expandafter\expandafter\let\expandafter\csname tp@#2@#4#3\expandafter\endcsname\csname tp@#2@#1#3\endcsname}
      {}}}
\long\def\tpToggleCountedCond{%
  \let\tp@is@counted\relax
  \long\protected\def\tpIfComp##1##2##3{%
    \expandafter\let\expandafter\@tempa\csname tp@\tp@cur@cont @##1\endcsname\relax
    \expandafter\expandafter\expandafter\ifx\@tempa\relax##3\else##2\fi}%
  \long\protected\def\tpIfCompEmpty##1##2##3{%
    \long\def\@tempa{}%
    \expandafter\let\expandafter\@tempb\csname tp@\tp@cur@cont @##1\endcsname\relax
    \expandafter\expandafter\expandafter\ifx\@tempb\@tempa ##2\else ##3\fi}}
\def\@namegdef{\global\@namedef}
\def\gcsappto{\global\csappto}
\long\def\tp@iterate{\@ifnextchar[{\@tp@iterate}{\@tp@iterate[\@ne]}}%]
\long\def\@tp@iterate[#1]#2#3#4#5{%
  \advance#2 by #1\relax
  #2=#3\relax%
  \expandafter\ifnum#2>#4\relax%
  \else
    #5%
    \tp@iterate[#1]{#2}{\the#2}{#4}{#5}%
  \fi}%
 \def\tpNamespace#1{\def\tp@cur@cont{#1}}
\endinput
%%
%% End of file `transpect-kernel.sty'.
