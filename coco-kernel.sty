%%
%% This is file `coco-kernel.sty',
%% generated with the docstrip utility.
%%
%% The original source files were:
%%
%% cocotex.dtx  (with options: `kernel')
%% 
%% IMPORTANT NOTICE:
%% 
%% For the copyright see the source file.
%% 
%% Any modified versions of this file must be renamed
%% with new filenames distinct from coco-kernel.sty.
%% 
%% For distribution of the original source see the terms
%% for copying and modification in the file cocotex.dtx.
%% 
%% This generated file may be distributed as long as the
%% original source files, as listed above, are part of the
%% same distribution. (The sources need not necessarily be
%% in the same archive or directory.)
%%
%% CoCoTeX Kernel
%%
%% Maintainer: p.schulz@le-tex.de
%%
\NeedsTeXFormat{LaTeX2e}[2023/11/01]
\ProvidesPackage{coco-kernel}
    [2025/01/28 v0.5.0 cocotex kernel]
\ifx\IfFormatAtLeastTF\@undefined
  \providecommand\IfFormatAtLeastTF{\@ifl@t@r\fmtversion}%
\fi
\IfFormatAtLeastTF{2020/06/01}{}%
  {\PackageError{CoCoTeX Kernel}
    {LaTeX kernel too old!}
    {CoCoTeX v0.5.0 and newer needs at least LaTeX kernel version 2023/11/01!}}
\RequirePackage{etoolbox}
\SetDefaultHookLabel{cc}
\newif\if@cc@debug \@cc@debugfalse
\ExplSyntaxOn
\keys_define:nn { cocotex/kernel }
{
  debug .code:n = {\global\@cc@debugtrue}
}
\global\let\debug@domain@list\relax
\keys_define:nn { cocotex/kernel }
{
  debug-domain .code:n = {%
    \global\@cc@debugtrue
    \if!#1!\else
      \def\do##1{\listadd\debug@domain@list{##1}}%
      \docsvlist{#1}%
    \fi
  }%
}
\let\cc@prefix\@empty
\keys_define:nn { cocotex/kernel }
{
  prefix .code:n = {\gdef\cc@prefix{#1}},%
  prefix .initial:n = {}
}
\ProcessKeyOptions[cocotex/kernel]
\ExplSyntaxOff
\def\ccPackageError#1#2#3#4{%
   \GenericError{%
      (#1)\@spaces\@spaces\@spaces\@spaces
   }{%
      [CoCoTeX #1 #2 Error] #3%
   }{}{#4}%
}
\def\cc@patch@error#1#2{%
  \ccPackageError{#1}{compatibility}
  {Could not patch \noexpand#2}
  {You probably use a LaTeX package that re-defines the \noexpand#1 control sequence. It is apparently not compatbile with CoCoTeX. Sorry}}
\def\ccPackageWarning#1#2#3{%
   \GenericWarning{%
      (#1)\@spaces\@spaces\@spaces\@spaces
   }{%
      [CoCoTeX #1 \if!#2!\else#2 \fi Warning] #3%
   }%
}
\def\ccPackageInfo#1#2#3{%
  \GenericInfo{%
    (#1)\@spaces\@spaces\@spaces\@spaces
  }{%
    [CoCoTeX #1\if!#2!\else\space#2\fi] #3%
  }%
}
\if@cc@debug
  \def\do#1{\csgdef{cc@debug@#1@message}##1{\typeout{[CoCo #1 Debug]\space##1}}}%
  \dolistloop{\debug@domain@list}%
  \def\cc@debug@@message#1{\typeout{[CoCo Debug]\space#1}}
\else
  \let\cc@debug@@message\@gobble
\fi
\def\ccDebugMsg{\cc@opt@empty\cc@debug@msg}
\def\cc@debug@msg[#1]#2{%
  \expandafter\ifx\csname cc@debug@#1@message\endcsname\relax
    \@gobble{#2}%
  \else
    \csname cc@debug@#1@message\endcsname{#2}%
  \fi
  }
\ifx\ccPrefix\@undefined\edef\ccPrefix{\cc@prefix}\fi
\ccPackageInfo{Kernel}{Info}{The macro prefix is now `\ccPrefix'.}
\newif\if@cc@is@final \@cc@is@finalfalse
\AtBeginDocument{\@cc@is@finaltrue}
\let\ccWhenAlly\@gobble
\let\ccUnlessAlly\@iden
\let\ccIfAlly\@gobble
\def\cc@warning@spaces{\space\space\space\space\space\space\space\space\space\space\space\space\space\space\space\space\space\space\space\space\space\space\space\space\space}%
\long\def\ccDeclareContainer#1#2{%
  \ifcsdef{cc@container@#1}
    {\ccPackageWarning{Kernel}{}{Re-declaring Container `#1'^^J%
\cc@warning@spaces All Type settings up to this point will remain!}}
    {\csdef{cc@container@#1}{}}%
  \csdef{cc@cur@cont}{#1}%
  \begingroup
    \def\ccInherit##1##2{\cc@inherit{##1}{##2}{#1}\ignorespaces}%
    \long\def\ccDeclareType##1##2{\csgappto{cc@type@##1@#1}{##2}\ignorespaces}%
    \def\ccDeclareEnv{\@ifnextchar [{\cc@declare@env}{\cc@declare@env[#1]}}%]
    \def\cc@declare@env[##1]##2##3{%
      \csgdef{\ccPrefix ##1}{\global\let\reserved@cont\cc@cur@cont\def\cc@cur@cont{#1}##2}%
      \csgdef{end\ccPrefix ##1}{##3}\global\let\cc@cur@cont\reserved@cont}%
    \ccDeclareType{Attributes}{}%
    #2%
  \endgroup
\ignorespaces}
\def\ccSetContainer#1{\def\cc@cur@cont{#1}\ignorespaces}
\def\ccAddToType#1#2{\csgappto{cc@type@#1@#2}}
\def\ccEvalType{\cc@opt@curcont\cc@eval@type}
\def\cc@eval@type[#1]#2{%
  \expandafter\ifx\csname cc@type@#2@#1\endcsname\relax
    \ccPackageError{Kernel}{Class}
      {Data Type #2 in Container #1 undefined!}
      {You try to evaluate a data type `#2' from container `#1', but that data type has not been declared.}%
  \else
    \ccDebugMsg[eval]{Evaluating cc@type@#2@#1:^^J \csmeaning{cc@type@#2@#1}}%
    \csname cc@type@#2@#1\endcsname
  \fi\ignorespaces}
\def\ccCheckParent#1#2{%
  \expandafter\ifx\csname cc@container@#1\endcsname\relax
    \ccPackageError{Kernel}{Class}
    {Parent Container `#1' undeclared}
    {You tried to make a Container named `#2' inherit from a Container named `#1', but a Container with that name does not exist.\MessageBreak
     Please make sure that parent Containers are declared before their descendents.}%
  \else
    \csgdef{cc@parent@#2}{#1}%
  \fi
  \ignorespaces}
\def\cc@inherit#1#2#3{\cc@parse@inherit #1,,\@nil #2,,\@nil #3\@@nil}
\def\cc@parse@inherit #1,#2,\@nil #3,#4,\@nil #5\@@nil{%
  \let\next\relax
  \if!#1!\else
    \if!#3!\else
      \cc@do@inherit{#1}{#3}{#5}%
      \def\@argii{#2}\def\@argiv{#4}%
      \ifx\@argii\@empty
        \ifx\@argiv\@empty\else
          \def\next{\cc@parse@inherit #1,,\@nil #4,\@nil #5\@@nil}%
        \fi
      \else
        \ifx\@argiv\@empty
          \def\next{\cc@parse@inherit #2,\@nil #3,,\@nil #5\@@nil}%
        \else
          \def\next{%
            \cc@parse@inherit #1,,\@nil #4,\@nil #5\@@nil
            \cc@parse@inherit #2,\@nil #3,#4,\@nil #5\@@nil
          }%
        \fi\fi\fi\fi
  \next}
\def\cc@do@inherit#1#2#3{%
  \ccDebugMsg[inheritance]{#3 inherits #1 from #2.}%
  \ccCheckParent{#2}{#3}%
  \expandafter\ifx\csname cc@type@#1@#2\endcsname\relax
    \ccPackageError{Kernel}{Type}{Type `#1' was not declared}{Type `#1' was not declared for Container `#2'.}%
  \else
    \edef\x{\noexpand\csgappto{cc@type@#1@#3}}%
    \expandafter\x\expandafter{\csname cc@type@#1@#2\endcsname}%
    \ccDebugMsg[inheritance]{value cc@type@#1@#3:^^J \csmeaning{cc@type@#1@#3}}%
  \fi
  \ignorespaces}
\def\ccDeclareComponent{\cc@opt@second\cc@declare@comp}
\def\cc@declare@comp[#1]#2#3#4{%
  \ltx@LocalExpandAfter\global\expandafter\let\csname cc@\cc@cur@cont @#1\endcsname\relax
  \expandafter\long\expandafter\def\csname \ccPrefix#2\endcsname##1{%
    #3\expandafter\long\expandafter\def\csname cc@\cc@cur@cont @#1\endcsname{##1}#4\ignorespaces}%
  \ignorespaces}
\def\ccDeclareGlobalComponent{\cc@opt@empty\cc@declare@global@comp}%
\def\cc@declare@global@comp[#1]#2{%
  \ccDeclareComponent{#2}{\expandafter\global}{}%
  \if!#1!\else\csname \ccPrefix #2\endcsname{#1}\fi%
  \ignorespaces}
\def\ccCompWarning#1{\ccPackageWarning{Kernel}{}{Assigning value to previously undeclared^^J%
    \cc@warning@spaces Component `#1'. Declaring now.}}
\long\protected\def\ccComponent#1#2{%
  \ifx\cc@is@counted\relax
    \ifcsdef{cc@\cc@cur@cont @#1}{}
      {\ccCompWarning{#1}\cc@def@counted@comp{\cc@counted@comp@scheme{#1}}{#1}{}{}}%
    \csgdef{cc@\cc@cur@cont @\cc@counted@comp@scheme{#1}}{#2}%
  \else
    \ifcsdef{cc@\cc@cur@cont @#1}{}
      {\ccCompWarning{#1}\ccDeclareComponent{#1}{}{}}%
    \csdef{cc@\cc@cur@cont @#1}{#2}%
  \fi\ignorespaces}
\long\protected\global\def\ccGlobalComponent#1#2{%
  \ifx\cc@is@counted\relax
    \ifcsdef{cc@\cc@cur@cont @#1}{}
      {\ccCompWarning{#1}\cc@def@counted@comp{\cc@counted@comp@scheme{#1}}{#1}{}{}}%
    \csgdef{cc@\cc@cur@cont @\cc@counted@comp@scheme{#1}}{#2}%
  \else
    \ifcsdef{cc@\cc@cur@cont @#1}{}
       {\ccCompWarning{#1}\ccDeclareGlobalComponent{#1}{}{}}%
    \csgdef{cc@\cc@cur@cont @#1}{#2}%
  \fi\ignorespaces}
\long\protected\def\ccComponentEA#1#2{%
  \def\x{\ccComponent{#1}}\expandafter\x\expandafter{#2}%
  \ignorespaces}
\def\ccUseComp#1{\csname cc@\cc@cur@cont @#1\endcsname}
\def\ccdefFromComp#1#2{\cc@store@comp{e}#1{#2}}
\def\ccgdefFromComp#1#2{\cc@store@comp{x}#1{#2}}
\def\ccpgdefFromComp#1#2{\def\x{\cc@store@comp{x}}\expandafter\x\csname\ccPrefix #1\endcsname{#2}}
\def\ccdefTlFromComp#1#2{\edef#1{\expandafter\unexpanded\expandafter\expandafter\expandafter{\csname cc@\cc@cur@cont @#2\endcsname}}}
\def\ccgdefTlFromComp#1#2{\xdef#1{\expandafter\unexpanded\expandafter\expandafter\expandafter{\csname cc@\cc@cur@cont @#2\endcsname}}}
\def\strip@longprefix#1\long macro:->#2{#2}
\long\def\cc@store@comp#1#2#3{%
  \edef\@tempa{\expandonce{\csname protected@#1def\endcsname}\noexpand#2}%
  \protected@edef\@tempb{\csname cc@\cc@cur@cont @#3\endcsname}%
   \ifx\@tempb\relax
     \let#2\relax
   \else
     \expandafter\@tempa\expandafter{\@tempb}%
  \fi
  \ignorespaces}
\def\ccUseComponentFrom#1#2{\csname cc@#1@#2\endcsname}
\def\ccGetComp{\@ifstar\cc@sget@comp\cc@get@comp}
\def\cc@get@comp#1{%
  \ccWhenComp{#1}
    {\ccWhenAlly{\ccaStructStart{P}}%
     \ccUseComp{#1}%
     \ccWhenAlly{\ccaStructEnd{P}}%
     \par}}
\def\cc@sget@comp#1{\ccWhenComp{#1}{\ccUseComp{#1}\par}}
\long\def\ccIfComp#1#2#3{\expandafter\ifx\csname cc@\cc@cur@cont @#1\endcsname\relax#3\else#2\fi}
\long\def\ccWhenComp#1#2{\expandafter\ifx\csname cc@\cc@cur@cont @#1\endcsname\relax\else#2\fi}
\long\def\ccUnlessComp#1#2{\expandafter\ifx\csname cc@\cc@cur@cont @#1\endcsname\relax#2\fi}
\long\def\ccIfCompFrom#1#2#3#4{\expandafter\ifx\csname cc@#1@#2\endcsname\relax#4\else#3\fi}
\long\def\ccIfCompFromVal#1#2#3#4#5{\protected@edef\@argiii{#3}\expandafter\ifx\csname cc@#1@#2\endcsname\@argiii#4\else#5\fi}
\long\def\cc@long@empty{}
\long\def\ccIfCompEmpty#1#2#3{\expandafter\ifx\csname cc@\cc@cur@cont @#1\endcsname\cc@long@empty#2\else#3\fi}
\long\def\ccIfCompFromEmpty#1#2#3#4{\expandafter\ifx\csname cc@#1@#2\endcsname\cc@long@empty#3\else#4\fi}
\def\cc@check@empty{\cc@opt@empty\@cc@check@empty}%]
\def\@cc@check@empty[#1]#2#3#4{%
   \ccIfComp{#4#3}
     {\ccIfCompEmpty{#4#3}
       {\expandafter\global\expandafter\let\csname cc@#2@#4#3\endcsname\relax}
       {}}
     {\ccIfComp{#1#3}
       {\expandafter\expandafter\expandafter\let\expandafter\csname cc@#2@#4#3\expandafter\endcsname\csname cc@#2@#1#3\endcsname}
       {}}}
\def\ccDeclareComponentGroup{\cc@opt@empty\cc@declare@component@group}%
\def\cc@declare@component@group[#1]#2#3{%
  \csnumgdef{cc#2Cnt}{\z@}%
  \def\@argi{#1}\ifx\@argi\@empty
    \csgdef{cc@type@Attributes@\cc@cur@cont @cc#2}{}%
  \else
    \csgappto{cc@type@Attributes@\cc@cur@cont @cc#2}{#1}%
  \fi
  \long\csdef{\ccPrefix#2}{\cc@opt@empty{\csname cc@group@#2\endcsname}}%
  \long\csdef{cc@group@#2}[##1]{%
    \def\cc@cnt@grp{cc#2}%
    \csxdef{cc#2Cnt}{\expandafter\the\expandafter\numexpr\csname cc#2Cnt\endcsname+\@ne\relax}%
    \if!##1!\else
      \ccEvalAttributes[\cc@cur@cont @cc#2]{##1}%
      \csgdef{cc@\cc@cur@cont @#2-\csname cc#2Cnt\endcsname @attrs}{##1}%
    \fi
    #3%
    \csname cc@group@#2@hook\endcsname
    \ignorespaces
  }%
  \csdef{end\ccPrefix#2}{{\ccToggleCountedConditionals\csuse{cc@compose@group@#2}}\aftergroup\ignorespaces}%
}
\def\ccAddToComponentGroup#1#2{\csappto{cc@group@#1@hook}{#2}}
\def\ccDeclareGroupHandler#1#2{%
  \ifcsdef{cc@group@#1}
    {\ifcsdef{cc@compose@group@#1}
      {\csgappto{cc@compose@group@#1}{#2}}
      {\csgdef{cc@compose@group@#1}{#2}}}
    {\ccPackageError{Kernel}{Type}{Component Group `#1' unknown!}{You tried to declare a Group Handler for a Component Group that has not been declared, yet! Use \string\ccDeclareComponentGroup{#1}{} to declare the Component Group first.}}%
\ignorespaces}
\let\cc@cnt@grp\@empty
\def\ccUseCompByIndex#1#2#3{\csname cc@\cc@cur@cont @#1-#3-#2\endcsname}
\def\ccUsePropFrom#1#2#3{%
  \begingroup
    \@tempcnta\numexpr#2\relax
    \letcs\ccTotalCount{cc#1Cnt}%
    \def\cc@cnt@grp{cc#1}%
    \ccToggleCountedConditionals
    \csnumdef{cc#1Cnt}{\the\@tempcnta}%
    \ccCurCount=\the\@tempcnta\relax%
    \csname cc@\cc@cur@cont @#3\endcsname%
  \endgroup}
\newcount\ccCurCount
\def\cc@assign@res#1{%
  \ifx\cc@iterate@res\@undefined
    \cslet{#1}\relax
  \else
    \ifx\cc@iterate@res\relax
      \cslet{#1}\relax
    \else
      \expandafter\csname #1\expandafter\endcsname\expandafter{\cc@iterate@res}%
    \fi
  \fi
  \global\let\cc@iterate@res\relax
}
\def\ccIfComponentOverride#1#2#3{\expandafter\ifx\csname cc@used@#1@override\endcsname\@empty#2\else#3\fi}
\def\ccComposeCollection#1#2#3{%
  \ccIfComp{#3}
    {\cslet{cc@used@#3@override}\@empty}
    {\cc@compose@collection{#1}{#2}%
     \cc@assign@res{\ccPrefix#3}}}
\def\ccApplyCollection#1#2#3{%
  \ccIfComp{#3}
    {\cslet{cc@used@#3@override}\@empty}
    {\cc@apply@collection{#1}{#2}%
     \cc@assign@res{\ccPrefix#3}}}
\def\cc@compose@collection#1#2{%
  \ccaProtect
  \expandafter\ifnum\csname cc#1Cnt\endcsname > \z@\relax
    \edef\cc@iterate@res{%
      \noexpand\bgroup
        \noexpand\def\noexpand\ccTotalCount{\csname cc#1Cnt\endcsname}%
        \noexpand\ccToggleCountedConditionals
        \noexpand\def\noexpand\cc@cur@cont{\cc@cur@cont}%
        \noexpand\def\noexpand\cc@cnt@grp{cc#1}}%
      \expandafter\@tempcntb=\csname cc#1Cnt\endcsname\relax
      \cc@iterate{\@tempcnta}{\@ne}{\@tempcntb}{%
        \edef\@tempb{%
          \noexpand\begingroup
            %% top-level counter for user interaction
            \noexpand\ccCurCount=\the\@tempcnta\relax
            %% evaluating the current group's Attributes
            \ifcsdef{cc@\cc@cur@cont @#1-\the\@tempcnta @attrs}
              {\noexpand\ccEvalAttributes[\cc@cur@cont @cc#1]
                {\csname cc@\cc@cur@cont @#1-\the\@tempcnta @attrs\endcsname}}{}%
              %% internal counter for macro grabbing
              \noexpand\csnumdef{cc#1Cnt}{\ccCurCount}%
              \noexpand\ccUseProperty{#2}%
              \noexpand\endgroup
          }%
          \expandafter\expandafter\expandafter\def
          \expandafter\expandafter\expandafter\cc@iterate@res
          \expandafter\expandafter\expandafter{\expandafter\cc@iterate@res\@tempb}%
        }%
        \expandafter\def\expandafter\cc@iterate@res\expandafter{\cc@iterate@res\egroup}%
  \fi
  \ccaEnable}
\def\cc@apply@collection#1#2{%
  \ccaProtect
  \begingroup
    \global\let\cc@iterate@res\relax
    \letcs\ccTotalCount{cc#1Cnt}%
    \cc@iterate{\@tempcnta}{\@ne}{\ccTotalCount}{%
      \bgroup
        \ccToggleCountedConditionals
        \def\cc@cnt@grp{cc#1}%
        \csnumdef{cc#1Cnt}{\the\@tempcnta}%
        \ifcsdef{cc@\cc@cur@cont @#1-\the\@tempcnta @attrs}
          {\ccEvalAttributes[\cc@cur@cont @cc#1]
            {\csname cc@\cc@cur@cont @#1-\the\@tempcnta @attrs\endcsname}}{}%
        \ccCurCount=\the\@tempcnta
        \protected@xdef\@tempb{\csname cc@\cc@cur@cont @#2\endcsname}%
        \@temptokena \expandafter{\@tempb}%
        \def\@tempc{\csgappto{cc@iterate@res}}%
        \expandafter\@tempc\expandafter{\@tempb}%
      \egroup
    }%
  \endgroup
  \ccaEnable
}
\def\cc@comp@edef{\cc@opt@empty\@cc@comp@edef}
\def\@cc@comp@edef[#1]#2#3#4{%
  \cc@apply@collection{#3}{#4}%
  \ifx\cc@iterate@res\relax
    #1\let#2\relax%
  \else
    \def\@tempa{#1\def#2}%
    \cc@assign@res{@tempa}%
  \fi
}
\def\cc@comp@def{\cc@opt@empty\@cc@comp@def}
\def\@cc@comp@def[#1]#2#3#4{%
  \cc@compose@collection{#3}{#4}%
  \ifx\cc@iterate@res\relax
    #1\let#2\relax%
  \else
    \def\@tempa{#1\def#2}%
    \cc@assign@res{@tempa}%
  \fi
}
\def\ccdefFromCountedComp{\cc@comp@def}
\def\ccgdefFromCountedComp{\cc@comp@def[\global]}
\def\ccedefFromCountedComp{\cc@comp@edef}
\def\ccxdefFromCountedComp{\cc@comp@edef[\global]}
\def\ccpxdefFromCountedComp#1{\expandafter\ccxdefFromCountedComp\csname \ccPrefix #1\endcsname}
\def\cc@counted@comp@scheme#1{\cc@cnt@grp-#1-\csname \cc@cnt@grp Cnt\endcsname}
\def\ccDeclareCountedComponent#1{%
  \cc@def@counted@comp
    {\cc@counted@comp@scheme{#1}}
    {#1}
    {}
    {\expandafter\global}%
  \ignorespaces}
\def\cc@def@counted@comp#1#2#3#4{%
  \ccDeclareComponent[#1]{#2}
    {\bgroup#3\expandafter\global}
    {\def\@tempa{{@cc@reset@components@\cc@cur@cont}}%
     \edef\@tempb{\noexpand\csgundef{cc@\noexpand\cc@cur@cont @#1}}%
     \expandafter\expandafter\expandafter\csgappto\expandafter\@tempa\expandafter{\@tempb}%
     \egroup}%
   \ignorespaces
   #4\expandafter\long\expandafter\def\csname cc@\cc@cur@cont @#2\endcsname{\csname cc@\cc@cur@cont @#1\endcsname}%
   \ignorespaces}
\def\cc@reset@components#1{%
  \csname @cc@reset@components@#1\endcsname
  \global\cslet{@cc@reset@components@#1}\relax%
}
\long\def\ccToggleCountedConditionals{%
  \let\cc@is@counted\relax
  \long\def\ccIfComp##1{%
    \expandafter\expandafter\expandafter\expandafter\expandafter\expandafter\expandafter\ifx\csname cc@\cc@cur@cont @##1\endcsname\relax\expandafter\@secondoftwo\else\expandafter\@firstoftwo\fi%
  }%
  \long\def\ccWhenComp##1{%
    \expandafter\expandafter\expandafter\expandafter\expandafter\expandafter\expandafter\ifx\csname cc@\cc@cur@cont @##1\endcsname\relax\expandafter\@gobble\else\expandafter\@firstofone\fi%
  }%
  \long\def\ccUnlessComp##1{%
    \expandafter\expandafter\expandafter\expandafter\expandafter\expandafter\expandafter\ifx\csname cc@\cc@cur@cont @##1\endcsname\relax\expandafter\@firstofone\else\expandafter\@gobble\fi%
  }%
  \long\def\ccIfCompEmpty##1{%
    \expandafter\expandafter\expandafter\ifx\csname cc@\cc@cur@cont @##1\endcsname\cc@long@empty\expandafter\@firstoftwo\else\expandafter\@secondoftwo\fi}%
  \ccToggleCountedConditionalsHook% legacy
}
\let\cc@reserved@if@comp\ccIfComp
\let\cc@reserved@when@comp\ccWhenComp
\let\cc@reserved@unless@comp\ccUnlessComp
\let\cc@reserved@if@comp@empty\ccIfCompEmpty
\def\ccUntoggleCountedConditionals{%
  \let\cc@is@counted\@undefined
  \let\ccIfComp\cc@reserved@if@comp
  \let\ccWhenComp\cc@reserved@when@comp
  \let\ccUnlessComp\cc@reserved@unless@comp
  \let\ccIfCompEmpty\cc@reserved@if@comp@empty
}
\long\def\ccSetProperty#1#2{\long\csdef{cc@\cc@cur@cont @#1}{#2}\ignorespaces}
\def\ccAppToProp#1#2{%
  \long\csappto{cc@\cc@cur@cont @#1}{#2}%
\ignorespaces}
\def\ccPreToProp#1#2{%
  \long\cspreto{cc@\cc@cur@cont @#1}{#2}%
\ignorespaces}
\long\def\ccPropertyLet#1#2{\long\csedef{cc@\cc@cur@cont @#1}{\expandonce{\csname cc@\cc@cur@cont @#2\endcsname}}\ignorespaces}
\long\def\ccPropertyLetX#1#2{\long\csedef{cc@\cc@cur@cont @#1}{\csname cc@\cc@cur@cont @#2\endcsname}\ignorespaces}
\long\def\ccSetPropertyVal#1#2{\def\@tempa{\ccSetProperty{#1}}\expandafter\@tempa\expandafter{#2}\ignorespaces}
\long\def\ccSetPropertyX#1#2{\long\csedef{cc@\cc@cur@cont @#1}{#2}\ignorespaces}
\long\def\ccAddToProperties#1#2{\ccAddToType{Properties}{#1}{#2}\ignorespaces}
\def\ccUseProperty#1{\csuse{cc@\cc@cur@cont @#1}}
\def\cc@store@prop{\cc@opt@empty\@cc@store@prop}%
\long\def\@cc@store@prop[#1]#2#3{%
  \protected@edef\@tempa{\ccUseProperty{#3}}%
  #1\expandafter\def\expandafter#2\expandafter{\@tempa}%
\ignorespaces}
\def\ccdefFromProperty{\cc@store@prop}
\def\ccgdefFromProperty{\cc@store@prop[\global]}
\def\ccpgdefFromProperty#1{\expandafter\ccgdefFromProperty\csname \ccPrefix #1\endcsname}
\def\ccUsePropertyEnv#1{\cslet{cc@#1@active}{\relax}\csuse{cc@\cc@cur@cont @#1}\csundef{cc@#1@active}}
\def\ccIfStrEqual#1#2{%
  \edef\@argi{#1}\edef\@argii{#2}%
  \expandafter\expandafter\expandafter\ifstrequal
    \expandafter\expandafter\expandafter{\expandafter\@argi\expandafter}%
      \expandafter{\@argii}}
\def\cc@set@property@locally#1#2#3{%
  \let\@cc@cur@cont\cc@cur@cont
  \ifdefstring\@cc@cur@cont{Heading}{\let\@cc@cur@cont\ccCurSecName}{}%
  \csappto{cc@type@Properties@\@cc@cur@cont}{#1{#2}{#3}}%
}
\def\ccSetPropLocal{\cc@set@property@locally\ccSetProperty}
\cslet{\ccPrefix SetPropLocal}\ccSetPropLocal%
\def\ccAppPropLocal{\cc@set@property@locally\ccAppToProp}
\cslet{\ccPrefix AppPropLocal}\ccAppPropLocal%
\def\ccPrePropLocal{\cc@set@property@locally\ccPreToProp}
\cslet{\ccPrefix PrePropLocal}\ccPrePropLocal%
\DeclareRobustCommand\ccPI[2]{\ifcsdef{cc@#1@active}{#2}{}}
\long\def\ccIfProp#1#2#3{%
  \expandafter\ifx\csname cc@\cc@cur@cont @#1\endcsname\relax#3\else
    \expandafter\ifx\csname cc@\cc@cur@cont @#1\endcsname\cc@long@empty#3\else#2\fi
  \fi
\ignorespaces}
\long\def\ccWhenProp#1#2{%
  \expandafter\ifx\csname cc@\cc@cur@cont @#1\endcsname\relax\else
    \expandafter\ifx\csname cc@\cc@cur@cont @#1\endcsname\cc@long@empty\else#2\fi
  \fi
\ignorespaces}
\long\def\ccIfPropVal#1#2#3#4{\long\def\@tempa{#2}%
  \expandafter\ifx\csname cc@\cc@cur@cont @#1\endcsname\@tempa\relax#3\else#4\fi\ignorespaces}
\long\def\cc@opt@curcont#1{\@ifnextchar[{#1}{#1[\cc@cur@cont]}}%]
\long\def\cc@opt@empty#1{\@ifnextchar[{#1}{#1[]}}%]
\let\cc@opt@second\@dblarg
\long\def\cc@iterate{\@ifnextchar[{\@cc@iterate}{\@cc@iterate[\@ne]}}%]
\long\def\@cc@iterate[#1]#2#3#4#5{%
  #2=#3\relax%
  \expandafter\ifnum#2>#4\relax%
  \else
    #5%
    \advance#2 by #1\relax
    \cc@iterate[#1]{#2}{\the#2}{#4}{#5}%
  \fi}%
\begingroup
\catcode`"=12
\gdef\ccParseAttributes#1#2{%
  \if!#1!\else
    \if!#2!\else
      \def\cc@cur@domain{#1}%
      \cc@parse@attributes #2,,\@nil
    \fi\fi}
\gdef\cc@parse@attributes #1,#2,\@nil{%
  \if!#1!\else
    \cc@parse@kv#1==\@nil
    \if!#2!\else
      \cc@parse@attributes#2,\@nil
    \fi\fi}
\gdef\cc@parse@kv#1=#2=#3\@nil{%
  \edef\@argii{#2}%
  \ifx\@argii\@empty
    \expandafter\let\csname cc@\cc@cur@domain @attr@#1\endcsname\@empty%
  \else
    \ifx #2 =\else
      \expandafter\def\csname cc@\cc@cur@domain @attr@#1\endcsname{#2}%
    \fi
  \fi}
\gdef\cc@parse@csv#1#2{%
  \if!#1!\else
    \let\cc@parser@callback#1%
    \edef\cc@tempa{\csname #2\endcsname}%
    \ifx\cc@tempa\@empty\else
      \expandafter\cc@@parse@csv\cc@tempa,,\@nil
    \fi
  \fi}
\gdef\cc@@parse@csv #1,#2,\@nil{%
  \if!#1!\else
    \cc@parser@callback{#1}%
  \fi
  \if!#2!\else
    \cc@@parse@csv#2,\@nil
  \fi
  \ignorespaces}
\endgroup
\def\ccEvalAttributes{\cc@opt@curcont\cc@eval@attributes}%
\def\cc@eval@attributes[#1]#2{%
  \expandafter\ifx\csname cc@type@#1@Attributes\endcsname\relax
    \ccParseAttributes{#1}{#2}%
    \def\ccDeclareAttributeHandler{%
      \let\cc@is@starred\@undefined
      \@ifstar
        {\let\cc@is@starred\relax\cc@declare@attribute@handler}
        {\cc@declare@attribute@handler}}%
    \def\cc@declare@attribute@handler##1{\cc@opt@empty{\@cc@declare@attribute@handler{##1}}}%
    \def\@cc@declare@attribute@handler##1[##2]##3{%
      \let\ccAttrVal\relax
      \ifx\cc@is@starred\relax
        \ccIfAttrIsSet{#1}{##1}{##3}{##2}%
      \else
        \ccIfAttr{#1}{##1}
          {\letcs\ccAttrVal{cc@#1@attr@##1}##3}
          {##2}%
      \fi\ignorespaces
    }%
    \ccEvalType[#1]{Attributes}%
  \else
    \if!#2!\else
      \ccPackageWarning{Kernel}{Attribute}
        {Container instance on line \inputlineno\space has Attributes,^^Jbut Container `#1' provides no Attribute handlers!}
    \fi
  \fi
  \ignorespaces}
\def\ccGetAttribute#1#2{\csuse{cc@#1@attr@#2}}
\def\ccIfAttr#1#2#3#4{\ifcsdef{cc@#1@attr@#2}{#3}{#4}}
\def\ccWhenAttr#1#2#3{\ifcsdef{cc@#1@attr@#2}{#3}{}}
\def\ccUnlessAttr#1#2#3{\ifcsdef{cc@#1@attr@#2}{}{#3}}
\def\ccIfAttrIsStr#1#2#3#4#5{\ccIfAttr{#1}{#2}{\ifcsstring{cc@#1@attr@#2}{#3}{#4}{#5}}{#5}}
\def\ccIfAttrIsSet#1#2#3#4{\ccIfAttr{#1}{#2}{\expandafter\ifx\csname cc@#1@attr@#2\endcsname\@empty#3\else#4\fi}{#4}}
\long\def\ccDeclareClass{\@ifnextchar [{\@cc@set@class}{\@cc@set@class[default]}}%]
\long\def\@cc@set@class[#1]#2{\cc@opt@empty{\cc@set@class[#1]{#2}}}%
\long\gdef\cc@default@class@default{}
\long\def\cc@set@class[#1]#2[#3]#4{%
  \def\@argii{#2}\ifx\@argii\@empty\let\@argii\cc@str@default\fi%
  \if!#3!\else
    \expandafter\long\expandafter\def\csname cc@#1@class@\@argii @parent\endcsname{#3}%
  \fi
  \expandafter\long\expandafter\def\csname cc@#1@class@\@argii\endcsname{#4}%
\ignorespaces}
\def\ccUseStyleClass#1#2{%
  \expandafter\ifx\csname cc@#2@class@#1\endcsname\relax
    \expandafter\ifx\csname cc@default@class@#1\endcsname\relax
      \PackageError{cocotex.cls}{Class `#1' with scope `#2' not defined!}{Please declare the class `#1'!}%
    \else
      \PackageInfo{cocotex.cls}{Class `#1' with scope `#2' not defined; using unscoped class.}%
    \fi
  \fi
  \csname cc@default@class@#1\endcsname%
  \expandafter\ifx\csname cc@#2@class@#1@parent\endcsname\relax\else
    \expandafter\ccUseStyleClass\expandafter{\csname cc@#2@class@#1@parent\endcsname}{#2}%
  \fi
  \csname cc@#2@class@#1\endcsname\ignorespaces}
\DeclareRobustCommand\CoCoTeX{\texorpdfstring{{C\kern-.1em o\kern-.033emC\kern-.1em o}\kern-.133em\TeX}{CoCoTeX}}
\endinput
%%
%% End of file `coco-kernel.sty'.
