%%
%% This package provides compatibility features for when CoCoTex is
%% used in conjunction with \textit{xerif}.
%%
%% The coco-xerif module is NO official part of the CoCoTeX framework,
%% but contains code necessary for CoCoTeX to play nicely with tex
%% files generated via xerif, like the `tp'-prefix for Component
%% names, and other specialties. The module must be loaded before the
%% CoCoTeX kernel.
%%
%% Maintainer: p.schulz@le-tex.de
%%
%% lualatex  -  texlive > 2018
%%
\NeedsTeXFormat{LaTeX2e}[2018/12/01]
\ProvidesPackage{coco-xerif}
    [2024-04-11 0.1 CoCoTeX xerif compatibility module]
\message{^^J[CoCoTeX Kernel Info]  Using the xerif compatibility module.^^J^^J}

\def\ccPrefix{tp}

%%
%% Please check your style files if any of the following aliases is
%% used and replace them with the new versions.
%%
%% DO NOT REDEFINE THE ALIASES OR THE NEW MACROS LOCALLY!
%%
%% Note: Top-level CS tokens are aliase'd with '\let' while CS tokens
%% whose definitions may change during processing are alias'd with
%% \def to ensure that they expand according to their respective
%% context.
%%
\g@addto@macro\ccAfterClassHook{%
  %% from coco-kernel.sty
  \let\tpDeclareContainer\ccDeclareContainer
  \let\tpAddToType\ccAddToType
  \let\tpSetComp\ccComponent
  \let\tpStoreComp\ccdefFromComp
  \let\tpGStoreComp\ccgdefFromComp
  \let\tpUseComp\ccUseComp
  \let\tpUseGComp\ccUseComponentFrom
  \let\tpGetComp\ccGetComp
  \let\tpIfComp\ccIfComp
  \let\tpWhenComp\ccWhenComp
  \let\tp@check@empty\cc@check@empty
  \let\tpGroupHandler\ccDeclareGroupHandler
  \let\tpUseGroupProp\ccUsePropFrom
  \let\tpIfCompOverride\ccIfComponentOverride
  \let\tpCompGDef\ccxdefFromCountedComp
  \let\tpDeclareCountedComp\ccDeclareCountedComponent
  \let\tpAddToHook\AddToHook
  \let\tpUseHook\UseHook
  \let\tpSetProperty\ccSetProperty
  \let\tpPropertyLet\ccPropertyLet
  \let\tpPropertyLetX\ccPropertyLetX
  \let\tpSetPropVal\ccSetPropertyVal
  \let\tpSetPropertyX\ccSetPropertyX
  \let\tpAddToDefault\ccAddToProperties
  \let\tpUseProperty\ccUseProperty
  \let\tpUsePropEnv\ccUsePropertyEnv
  \let\tpIfProp\ccIfProp
  \let\tpIfPropVal\ccIfPropVal
  \let\tpDeclareClass\ccDeclareClass
  \let\tpIfAttrStr\ccIfAttrIsStr
  \let\tpNamespace\ccSetContainer
  \def\tpIfComp{\ccIfComp}%
  \def\tpWhenComp{\ccWhenComp}%
  \def\tpUnlessComp{\ccUnlessComp}%
  \def\tpIfCompEmpty{\ccIfCompEmpty}%
  \def\tpTotalCount{\ccTotalCount}%
  \def\tpCurCount{\ccCurCount}%
  %% from coco-common.sty
  \let\tp@str@table\cc@str@table
  \let\tp@str@figure\cc@str@figure
  \def\tpGobble{\ccGobble}%
  \def\tpBreak{\ccBreak}%
  \let\tpContentsline\ccContentsline
  \let\tp@store@latest\cc@store@latest
  \let\tpSetBabelLabel\ccSetBabelLabel
  \let\tpPageLabel\ccPageLabel
  \def\tpTocLink{\ccTocLink}%
  \let\@afterbox\cc@afterbox
  %% from coco-floats.sty
  \let\tpSubFloat\ccSubFloat
  \let\endtpSubFloat\endccSubFloat
  \let\tp@make@caption\ccf@make@caption
  \let\tp@str@bottom\ccf@str@bottom
  \let\tp@str@top\ccf@str@top
  %% LUP: falsch!
  %\let\tpDeclareFloat\ccDeclareFloat
  %LUP sollte das sein:
  \newcommand\tpDeclareFloat[5][float]{%
    \ifcsdef{cc@container@#2}
      {\if!#1!\else\ccInherit{Properties,Components,Attributes}{#1}\fi
       \ccAddToType{Properties}{#2}{#5}
       \ccAddToType{FloatEnvInfo}{#2}
         {\ccSetContainer{#2}
          \def\ccfCapType{#3}
          \def\ccf@cap@list@type{#4}}}
      {\ccDeclareFloat[#1]{#2}{#3}{#4}{\ccDeclareType{Properties}{#5}}}
    }%
  \def\tp@flt@process{\ccf@process}%
  \let\tpFloatBarrier\ccFloatBarrier
  \def\tp@captype{\ccfCapType}%
  \def\tp@caplisttype{\ccf@cap@list@type}%
  \let\tpInlineFigure\ccInlineFigure
  %% from coco-heading.sty
  %
  % The old "heading" environment was replaced with the |\ccPrefix
  % Heading| environment. With 'Heading' as name of the respective
  % Container, and the '\ccPrefix' set to 'tp', this makes
  % the actual "official" env name |tpheading|.
  \def\heading{\tpHeading}
  \def\endheading{\endtpHeading}
  \let\tpDeclareHeading\ccDeclareHeading
  \let\tpAbstractTitle\ccAbstractTitle
  \let\tpKeywordsTitle\ccKeywordsTitle
  \let\tpTitleEnTitle\ccTitleEnTitle
  %% from coco-meta.sty
  \let\tpUseLabeledComp\ccUseLabeledComp
  \def\tpAuthorCnt{\ccAuthorCnt}%
  %% from coco-script.sty
  \let\tpBabelAlias\ccBabelAlias
  \let\tpDeclareBabelFont\ccDeclareBabelFont
  %% from coco-title.sty
  \let\tpDeclareTitlepage\ccDeclareTitlepage
  %% publisher-specific
  \let\tpPI\ccPI
}

\g@addto@macro\ccToggleCountedConditionalsHook{%
  \let\tpIfComp\ccIfComp
  \let\tpWhenComp\ccWhenComp
  \let\tpIfCompEmpty\ccIfCompEmpty
}

